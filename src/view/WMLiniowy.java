/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.BasicStroke;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import logic.WMData;
import logic.WMFile;

/**
 *
 * @author Wojtek
 */
public class WMLiniowy extends javax.swing.JPanel {

    private Integer margines;

    /**
     * Creates new form WMLiniowy
     */
    public WMLiniowy() {
        initComponents();
    }

    @Override
    public void paint(Graphics g) {
        try {
            super.paint(g);

            double width = (this.getWidth() - WMData.getMargines() * 2) / WMData.getSciezka().length();
            double height = 0;
            height = (double) (this.getHeight() - 2 * WMData.getMargines() - 10) / (WMData.getMaxData(WMFile.odczyt(WMData.getSciezka())));
            Graphics2D g2D = (Graphics2D) g;
            int x1, x2, y1 = 0, y2 = 0;

            for (int i = 0; i < (WMFile.odczyt(WMData.getSciezka()).length) - 1; i++) {
                y1 = (int) (getHeight() - WMData.getMargines() - WMFile.odczyt(WMData.getSciezka())[i] * height);
                y2 = (int) (getHeight() - WMData.getMargines() - WMFile.odczyt(WMData.getSciezka())[i + 1] * height);
                x1 = (int) (WMData.getMargines() + i * width + 1);
                x2 = (int) (WMData.getMargines() + i * width + 1 * width);
                g2D.setStroke(new BasicStroke(1));
                g2D.setColor(WMData.getKolor());
                g.drawLine(this.getHeight() + WMData.getMargines(), WMData.getMargines(), this.getWidth(), WMData.getMargines());
                g2D.drawLine(x1, y1, x2, y2);
            }
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setToolTipText("Wykres Liniowy");
        setName("Wykres Liniowy"); // NOI18N
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                start(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("Wykres Liniowy");
        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void start(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_start
    }//GEN-LAST:event_start
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
